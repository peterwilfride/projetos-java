/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package project.gradle;

import project.gradle.A;
import project.gradle.ClasseThread;
import java.util.ArrayList;
import java.net.*;
import java.io.*;

public class App {
    public static void main(String[] args) throws IOException {
        /* simpliest web server */
        int porta = 8080; // Porta em que o servidor vai ouvir

        // Cria um socket de servidor na porta especificada
        ServerSocket servidorSocket = new ServerSocket(porta);

        System.out.println("Servidor ouvindo na porta " + porta);

        // USAR ARGUMENTOS NA LINHA DE COMANDO PARA DEFINIR SE VAI USAR SERVIDOR MULTITHREAD OU NÃO
        /* With concurrency*/
        while (true) {
            // Espera por uma conexão de um cliente
            Socket clienteSocket = servidorSocket.accept();

            System.out.println("Nova conexão estabelecida: " + clienteSocket);

            // Cria um objeto BufferedReader para ler a requisição do cliente
            // BufferedReader input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
            
            // Cria uma nova thread para lidar com a conexão do cliente
            Thread threadCliente = new Thread(new ClienteHandler(clienteSocket));
            
            threadCliente.start();
        }

        /* Whitout concurrency
        while (true) {
            try {
                // Espera por uma conexão de um cliente
                Socket clienteSocket = servidorSocket.accept();

                System.out.println("Nova conexão estabelecida: " + clienteSocket);

                // Cria um objeto BufferedReader para ler a requisição do cliente
                BufferedReader input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));

                // Lê a primeira linha da requisição HTTP GET
                String requestLine = input.readLine();

                System.out.println("Requisição recebida: " + requestLine);

                // dalay
                Thread.sleep(5000);

                // Cria um objeto PrintWriter para enviar a resposta ao cliente
                PrintWriter output = new PrintWriter(clienteSocket.getOutputStream());

                // Envia a resposta HTTP para o cliente
                output.println("HTTP/1.1 200 OK");
                output.println("Content-Type: text/html");
                output.println("");
                output.println("<html><body><h1>Olá, mundo!</h1></body></html>");
                output.flush();

                // Fecha as conexões com o cliente
                output.close();
                input.close();
                clienteSocket.close();
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        }*/

        /* simpliest load balance
        // creating a source
        ArrayList<Integer> numbersToPrint = new ArrayList<Integer>();
        for (int i = 1; i < 100; i++) {
            numbersToPrint.add(i);
        }
        
        // sending data to threads
        for (int x = 1; x < numbersToPrint.size(); x++) {
            // if data is odd
            if (x % 2 == 0) {
                Thread thread = new Thread(new ClasseThread(1, x));
                thread.start();
            } else {
                Thread thread = new Thread(new ClasseThread(2, x));
                thread.start();         
            }
        }

        Thread thread1 = new Thread(new ClasseThread(1));
        Thread thread2 = new Thread(new ClasseThread(2));
        thread1.start();
        thread2.start();

        // rodando na thread principal
        A a = new A("pedro", 26);

        System.out.println(a.name);
        System.out.println(a.age);*/

    }
}


